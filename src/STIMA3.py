# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'STIMA3.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWebEngineWidgets import QWebEngineView
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import os
import sys
import networkx as nx
from Graph import*
from UCS import*
from AStar import*
from Utils import*
import time
import gmplot


class Ui_MainWindow(object):
    def __init__(self):
        self.file_name = None
        self.start_val = None
        self.goal_val = None
        self.total_cost = None
        self.route_path = None
        self.runtime = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.left_frame = QtWidgets.QFrame(self.centralwidget)
        self.left_frame.setGeometry(QtCore.QRect(0, 0, 351, 701))
        self.left_frame.setStyleSheet("background-color:rgb(36, 31, 49)")
        self.left_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_frame.setObjectName("left_frame")
        self.upload_button = QtWidgets.QPushButton(self.left_frame)
        self.upload_button.setGeometry(QtCore.QRect(60, 130, 91, 31))
        self.upload_button.clicked.connect(self.open_file)
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.upload_button.setFont(font)
        self.upload_button.setStyleSheet("color: rgb(255, 255, 255)")
        self.upload_button.setObjectName("upload_button")
        self.choose_file = QtWidgets.QLabel(self.left_frame)
        self.choose_file.setGeometry(QtCore.QRect(60, 100, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.choose_file.setFont(font)
        self.choose_file.setStyleSheet("color: rgb(255, 255, 255)")
        self.choose_file.setObjectName("choose_file")
        self.filename = QtWidgets.QLabel(self.left_frame)
        self.filename.setGeometry(QtCore.QRect(60, 170, 311, 17))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(True)
        self.filename.setFont(font)
        self.filename.setStyleSheet("color: rgb(255, 255, 255)")
        self.filename.setObjectName("filename")
        self.UCS_button = QtWidgets.QRadioButton(self.left_frame)
        self.UCS_button.setGeometry(QtCore.QRect(40, 360, 311, 23))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(14)
        self.UCS_button.setFont(font)
        self.UCS_button.setAutoFillBackground(False)
        self.UCS_button.setStyleSheet("color: rgb(255, 255, 255);")
        self.UCS_button.setChecked(True)
        self.UCS_button.setObjectName("UCS_button")
        self.AS_button = QtWidgets.QRadioButton(self.left_frame)
        self.AS_button.setGeometry(QtCore.QRect(40, 400, 311, 23))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(14)
        self.AS_button.setFont(font)
        self.AS_button.setStyleSheet("color: rgb(255, 255, 255)")
        self.AS_button.setObjectName("AS_button")
        self.search_button = QtWidgets.QPushButton(self.left_frame)
        self.search_button.setGeometry(QtCore.QRect(60, 480, 231, 51))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.search_button.setFont(font)
        self.search_button.setStyleSheet("color: rgb(255, 255, 255);")
        self.search_button.setObjectName("search_button")
        self.search_button.clicked.connect(self.update_plot)
        self.starting_node = QtWidgets.QLabel(self.left_frame)
        self.starting_node.setGeometry(QtCore.QRect(60, 240, 291, 17))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(False)
        self.starting_node.setFont(font)
        self.starting_node.setStyleSheet("color: rgb(255, 255, 255)")
        self.starting_node.setObjectName("starting_node")
        self.goal_node = QtWidgets.QLabel(self.left_frame)
        self.goal_node.setGeometry(QtCore.QRect(60, 280, 291, 17))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(False)
        self.goal_node.setFont(font)
        self.goal_node.setStyleSheet("color: rgb(255, 255, 255)")
        self.goal_node.setObjectName("goal_node")
        self.start_input = QtWidgets.QLineEdit(self.left_frame)
        self.start_input.setGeometry(QtCore.QRect(180, 230, 31, 25))
        self.start_input.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.start_input.setObjectName("start_input")
        self.start_input.textChanged.connect(self.start_value)
        self.goal_input = QtWidgets.QLineEdit(self.left_frame)
        self.goal_input.setGeometry(QtCore.QRect(180, 270, 31, 25))
        self.goal_input.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.goal_input.setObjectName("goal_input")
        self.goal_input.textChanged.connect(self.goal_value)
        self.exe_time = QtWidgets.QLabel(self.left_frame)
        self.exe_time.setGeometry(QtCore.QRect(60, 540, 301, 17))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(False)
        self.exe_time.setFont(font)
        self.exe_time.setStyleSheet("color: rgb(255, 255, 255)")
        self.exe_time.setObjectName("exe_time")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(350, 0, 931, 701))
        self.frame_2.setStyleSheet("background-color:rgb(61, 56, 70)")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.title = QtWidgets.QLabel(self.frame_2)
        self.title.setGeometry(QtCore.QRect(0, 0, 931, 81))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.title.setFont(font)
        self.title.setStyleSheet("color: rgb(255, 255, 255)")
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("title")
        self.widget = QtWidgets.QWidget(self.frame_2)
        self.widget.setGeometry(QtCore.QRect(0, 90, 931, 611))
        self.widget.setStyleSheet("background-color: rgb(255, 255, 255)")
        self.widget.setObjectName("widget")
        self.cost = QtWidgets.QLabel(self.widget)
        self.cost.setGeometry(QtCore.QRect(0, 529, 931, 31))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(False)
        self.cost.setFont(font)
        self.cost.setStyleSheet("color: rgb(255,255,255);\n"
"background-color: rgb(61, 56, 70);")
        self.cost.setObjectName("cost")
        self.route = QtWidgets.QLabel(self.widget)
        self.route.setGeometry(QtCore.QRect(0, 560, 931, 51))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setItalic(False)
        self.route.setFont(font)
        self.route.setStyleSheet("color: rgb(255,255,255);\n"
"background-color: rgb(61, 56, 70);")
        self.route.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.route.setObjectName("route")

        self.web_view = QWebEngineView(self.centralwidget)
        self.web_view.setGeometry(QtCore.QRect(350, 90, 930, 530))
        

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        

        # Define the size of the widget
        widget_size = self.widget.size()

        # Create a Figure object
        self.figure = Figure(figsize=(widget_size.width(), widget_size.height()))

        
        # Set the fixed size for the widget
        self.widget.setFixedSize(widget_size)

        # Set the size of the Figure object
        self.figure.set_size_inches(widget_size.width()/100, widget_size.height()/120)

        # Create a Matplotlib figure and canvas, i want the figure to be the size of the widget
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setParent(self.widget)

        # Add a Graph figure to the matplotlib canvas
        self.graph = self.figure.add_subplot(111)
        self.graph.set_axis_off()

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upload_button.setText(_translate("MainWindow", "Upload"))
        self.choose_file.setText(_translate("MainWindow", "Choose File"))
        self.filename.setText(_translate("MainWindow", "Filename:"))
        self.UCS_button.setText(_translate("MainWindow", "Uniform Cost Search"))
        self.AS_button.setText(_translate("MainWindow", "A-Star"))
        self.search_button.setText(_translate("MainWindow", "Search"))
        self.starting_node.setText(_translate("MainWindow", "Starting Node "))
        self.goal_node.setText(_translate("MainWindow", "Goal Node "))
        self.exe_time.setText(_translate("MainWindow", "Execution Time: "))
        self.title.setText(_translate("MainWindow", "Shortest Path Solver"))
        self.cost.setText(_translate("MainWindow", "     Total Cost :"))
        self.route.setText(_translate("MainWindow", "     Route : "))

    def open_file(self):
        file_dialog = QFileDialog()
        self.file_path, _ = file_dialog.getOpenFileName(None, "Open File", "", "Text Files (*.txt);;All Files (*.*)")
        self.update_label(os.path.basename(self.file_path))
        self.init_plot()

    def update_label(self, filename):
        self.filename.setText("Filename: " + filename)

    def update_run_time(self):
        self.exe_time.setText("Execution Time: {:.2f} ms".format(self.runtime))

    def update_cost(self):
        self.cost.setText("     Total Cost : " + str(self.total_cost))

    def update_route(self):
        print_route = None
        for i in range(len(self.route_path)):
            if i == 0:
                print_route = str(self.route_path[i])
            else:
                print_route = print_route + " -> " + str(self.route_path[i])
        self.route.setText("     Route : " + print_route)

    def start_value(self):
        self.start_val = self.start_input.text()

    def goal_value(self):
        self.goal_val = self.goal_input.text()

    def init_plot(self):

        # Clear the previous plot
        self.graph.clear()

        try :
            #unhide webview
            self.web_view.show()
            G = Graph()
            G.createGraphWithCoords(self.file_path)
            G.printGraph()
            gmap = gmplot.GoogleMapPlotter(G.Maplat, G.Maplong, 17)

            # give the map a title
            gmap.title = G.Mapname

            # give description for each node in the map
            for node in G.nodes:
                gmap.marker(G.nodeID[node][1], G.nodeID[node][2], 'red', title=f"Node {node} - {G.nodeID[node][0]}.", info_window=f"Node {node} - {G.nodeID[node][0]}.")

            # plot the graph, each node is a blue dot, each edge is a blue line
            for node in G.nodes:
                for neighbor in G.nodes[node]:
                    gmap.scatter([G.nodeID[node][1], G.nodeID[neighbor][1]], [G.nodeID[node][2], G.nodeID[neighbor][2]], 'red', size = 5, marker = False)
                    gmap.plot([G.nodeID[node][1], G.nodeID[neighbor][1]], [G.nodeID[node][2], G.nodeID[neighbor][2]], 'blue', edge_width=1)

            gmap.draw("result/"+G.Mapname+".html")
            #initiate webview
            self.web_view.setUrl(QtCore.QUrl.fromLocalFile(os.path.abspath("result/"+G.Mapname+".html")))
            #hide canvas
            self.canvas.hide()
        except:
            #unhide canvas
            self.canvas.show()
            # Add nodes and edges to the NetworkX graph
            G = nx.DiGraph()
            graph = Graph()
            graph.createGraph(self.file_path)
            # insert edges to G
            graph.printGraph()
            for node in graph.nodes:
                for neighbor in graph.nodes[node]:
                    G.add_edge(node, neighbor, weight=graph.nodes[node][neighbor])
            # Draw the NetworkX graph on the Matplotlib figure, use kamada-kawai
            pos = nx.kamada_kawai_layout(G)
            nx.draw(G, pos, with_labels=True, node_size=500, node_color='black', font_size=10, font_color='white', font_weight='bold', ax=self.graph)

            #hide webview
            self.web_view.hide()
            # Refresh the canvas
            self.canvas.draw()


    def update_plot(self):
        pair = None
        startTime = None
        endTime = None
        start = int(self.start_val)
        goal = int(self.goal_val)
        # Clear the previous plot
        self.graph.clear()

        try :
            G = Graph()
            G.createGraphWithCoords(self.file_path)
            G.printGraph()
            

            gmap = gmplot.GoogleMapPlotter(G.Maplat, G.Maplong, 17)

            # give the map a title
            gmap.title = G.Mapname

            # give description for each node in the map
            for node in G.nodes:
                gmap.marker(G.nodeID[node][1], G.nodeID[node][2], 'red', title=f"Node {node} - {G.nodeID[node][0]}.", info_window=f"Node {node} - {G.nodeID[node][0]}.")

            # plot the graph, each node is a blue dot, each edge is a blue line
            for node in G.nodes:
                for neighbor in G.nodes[node]:
                    gmap.scatter([G.nodeID[node][1], G.nodeID[neighbor][1]], [G.nodeID[node][2], G.nodeID[neighbor][2]], 'red', size = 5, marker = False)
                    gmap.plot([G.nodeID[node][1], G.nodeID[neighbor][1]], [G.nodeID[node][2], G.nodeID[neighbor][2]], 'blue', edge_width=1)

            if self.UCS_button.isChecked():
                startTime = time.perf_counter_ns()
                ucs = UCS(G, start, goal)
                endTime = time.perf_counter_ns()
                self.route_path = ucs.path
                self.total_cost = ucs.cost
                for i in range(len(ucs.path)-1):
                    gmap.plot([G.nodeID[ucs.path[i]][1], G.nodeID[ucs.path[i+1]][1]], [G.nodeID[ucs.path[i]][2], G.nodeID[ucs.path[i+1]][2]], 'green', edge_width=5)
            elif self.AS_button.isChecked():
                startTime = time.perf_counter_ns()
                astar = AStar(start, goal, G)
                endTime = time.perf_counter_ns()
                self.route_path = astar.path
                self.total_cost = astar.cost
                # plot the path
                for i in range(len(astar.path)-1):
                    gmap.plot([G.nodeID[astar.path[i]][1], G.nodeID[astar.path[i+1]][1]], [G.nodeID[astar.path[i]][2], G.nodeID[astar.path[i+1]][2]], 'green', edge_width=5)
            self.runtime = (endTime - startTime) / 1000

            gmap.draw("result/"+G.Mapname+".html")
            #initiate webview
            self.web_view.setUrl(QtCore.QUrl.fromLocalFile(os.path.abspath("result/"+G.Mapname+".html")))
            #hide canvas
            self.canvas.hide()

        except :
            #unhide canvas
            self.canvas.show()
            # Add nodes and edges to the NetworkX graph
            G = nx.DiGraph()
            graph = Graph()
            graph.createGraph(self.file_path)
            # insert edges to G
            graph.printGraph()
            for node in graph.nodes:
                for neighbor in graph.nodes[node]:
                    G.add_edge(node, neighbor, weight=graph.nodes[node][neighbor])
            # Draw the NetworkX graph on the Matplotlib figure, use kamada-kawai
            pos = nx.kamada_kawai_layout(G)
            nx.draw(G, pos, with_labels=True, node_size=500, node_color='black', font_size=10, font_color='white', font_weight='bold', ax=self.graph)

            graph = Graph()
            
            graph.createGraph(self.file_path)
            if self.UCS_button.isChecked():
                startTime = time.perf_counter_ns()
                ucs = UCS(graph, start, goal)
                endTime = time.perf_counter_ns()
                pair = list_to_adjacent_pairs(ucs.path)
                self.route_path = ucs.path
                self.total_cost = ucs.cost
            elif self.AS_button.isChecked():
                startTime = time.perf_counter_ns()
                astar = AStar(start, goal, graph)
                endTime = time.perf_counter_ns()
                pair = list_to_adjacent_pairs(astar.path)
                self.route_path = astar.path
                self.total_cost = astar.cost
            self.runtime = (endTime - startTime) / 1000

            # Draw the NetworkX graph on the Matplotlib figure
            pos = nx.kamada_kawai_layout(G)

            # Color edges on the UCS path as red
            nx.draw_networkx_edges(G, pos, edgelist=pair, edge_color='red', width=3, ax=self.graph)

            # Update the canvas
            self.canvas.draw()

            #hide webview
            self.web_view.hide()
        
        # Update
        self.update_run_time()
        self.update_cost()
        self.update_route()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())